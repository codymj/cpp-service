#pragma once

#include <string>
#include <utility>

/*
 * Model for users table defined as:
 * users
 * (
 *     user_id bigint primary key generated by default as identity,
 *     email varchar(64) not null,
 *     password varchar(76) not null,
 *     first_name varchar(32) not null,
 *     last_name varchar(32) not null,
 *     created_at timestamp without time zone default (now() at time zone 'utc'),
 *     modified_at timestamp without time zone default (now() at time zone 'utc')
 * );
 */
class user
{
public:
    user() = default;
    user(user const&) = default;
    user& operator=(user const&) = default;
    user(user&&) noexcept = default;
    user& operator=(user&&) noexcept = default;

    /**
     * Constructor for all User parameters.
     * @param user_id User ID.
     * @param email User email.
     * @param password User password (hashed).
     * @param first_name User first name.
     * @param last_name User last name.
     * @param created_at When the user was created.
     * @param modified_at When the user was last updated.
     */
    user
    (
        uint64_t const user_id,
        std::string email,
        std::string password,
        std::string first_name,
        std::string last_name,
        uint64_t const created_at,
        uint64_t const modified_at
    )
    : m_email(std::move(email))
    , m_password(std::move(password))
    , m_first_name(std::move(first_name))
    , m_last_name(std::move(last_name))
    , m_user_id(user_id)
    , m_created_at(created_at)
    , m_modified_at(modified_at)
    {}

    /**
     * Constructor for saving a user.
     * userId, createdAt and modifiedAt are generated by the database.
     * @param email User email.
     * @param password User password (hashed).
     * @param first_name User first name.
     * @param last_name User last name.
     */
    user
    (
        std::string email,
        std::string password,
        std::string first_name,
        std::string last_name
    )
    : m_email(std::move(email))
    , m_password(std::move(password))
    , m_first_name(std::move(first_name))
    , m_last_name(std::move(last_name))
    {}

    [[maybe_unused]] [[nodiscard]] uint64_t get_user_id() const
    {
        return m_user_id;
    }

    [[maybe_unused]] void set_user_id(uint64_t const user_id)
    {
        m_user_id = user_id;
    }

    [[maybe_unused]] [[nodiscard]] std::string get_email() const
    {
        return m_email;
    }

    [[maybe_unused]] void set_email(std::string email)
    {
        m_email = std::move(email);
    }

    [[maybe_unused]] [[nodiscard]] std::string get_password() const
    {
        return m_password;
    }

    [[maybe_unused]] void set_password(std::string password)
    {
        m_password = std::move(password);
    }

    [[maybe_unused]] [[nodiscard]] std::string get_first_name() const
    {
        return m_first_name;
    }

    [[maybe_unused]] void set_first_name(std::string first_name)
    {
        m_first_name = std::move(first_name);
    }

    [[maybe_unused]] [[nodiscard]] std::string get_last_name() const
    {
        return m_last_name;
    }

    [[maybe_unused]] void set_last_name(std::string last_name)
    {
        m_last_name = std::move(last_name);
    }

    [[maybe_unused]] [[nodiscard]] uint64_t get_created_at() const
    {
        return m_created_at;
    }

    [[maybe_unused]] void set_created_at(uint64_t const created_at)
    {
        m_created_at = created_at;
    }

    [[maybe_unused]] [[nodiscard]] uint64_t get_modified_at() const
    {
        return m_modified_at;
    }

    [[maybe_unused]] void set_modified_at(uint64_t const modified_at)
    {
        m_modified_at = modified_at;
    }

private:
    std::string m_email{};
    std::string m_password{};
    std::string m_first_name{};
    std::string m_last_name{};
    uint64_t m_user_id{};
    uint64_t m_created_at{};
    uint64_t m_modified_at{};
};
